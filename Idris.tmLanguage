<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>idr</string>
	</array>
	<key>name</key>
	<string>Idris-better</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.entity.idris</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.entity.idris</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Infix function application</string>
			<key>match</key>
			<string>(`)[a-zA-Z_']*?(`)</string>
			<key>name</key>
			<string>keyword.operator.function.infix.idris</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.idris</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^(module)\s+([a-zA-Z._']+)$</string>
			<key>name</key>
			<string>meta.declaration.module.idris</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.idris</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^(import)\s+([a-zA-Z._']+)$</string>
			<key>name</key>
			<string>meta.import.idris</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>\b(class)\b</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.idris</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\b(where)\b|$</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.idris</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.declaration.class.idris</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>\b(instance)\b</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.idris</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\b(where)\b|$</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.idris</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.declaration.instance.idris</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type_signature</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>include</key>
			<string>#directive</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#prelude_class</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#prelude_type</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#prelude_function</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#comments</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#infix_op</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#language_const</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>I'm not sure that these are all keywords, but don't know where to check it</string>
			<key>match</key>
			<string>\b(infix[lr]?|data|type|let|newtype|default|auto)\b</string>
			<key>name</key>
			<string>keyword.other.idris</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Maybe these keywords should be in the operator scope</string>
			<key>match</key>
			<string>\b(where|of|in|with)\b</string>
			<key>name</key>
			<string>keyword.operator.idris</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(do|if|then|else|case)\b</string>
			<key>name</key>
			<string>keyword.control.idris</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b([0-9]+\.[0-9]+([eE][+-]?[0-9]+)?|[0-9]+[eE][+-]?[0-9]+)\b</string>
			<key>name</key>
			<string>constant.numeric.float.idris</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b([0-9]+|0([xX][0-9a-fA-F]+|[oO][0-7]+))\b</string>
			<key>name</key>
			<string>constant.numeric.idris</string>
		</dict>
		<dict>
			<key>match</key>
			<string>^\b(public|abstract|private)\b</string>
			<key>name</key>
			<string>storage.modifier.export.idris</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(total|partial)\b</string>
			<key>name</key>
			<string>storage.modifier.totality.idris</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>"</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.idris</string>
				</dict>
			</dict>
			<key>end</key>
			<string>"</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.idris</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double.idris</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#escape_characters</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>\'</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.idris</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\'</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.idris</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.single.idris</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#escape_characters</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>^\s*([a-zA-Z0-9_']+|\([|!%$+\-.,=&lt;/&gt;]+\))\s*(:)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.idris</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.colon.idris</string>
				</dict>
			</dict>
			<key>end</key>
			<string>($|;)</string>
			<key>name</key>
			<string>meta.function.type-declaration.idris</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type_signature</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>match</key>
			<string>\b[A-Z][A-Za-z_'0-9]*</string>
			<key>name</key>
			<string>constant.other.idris</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>In case this regex seems overly general, note that Haskell permits the definition of new operators which can be nearly any string of punctuation characters, such as $%^&amp;*.</string>
			<key>match</key>
			<string>[|!%$?~+:\-.=&lt;/&gt;\\]+</string>
			<key>name</key>
			<string>keyword.operator.idris</string>
		</dict>
		<dict>
			<key>match</key>
			<string>,</string>
			<key>name</key>
			<string>punctuation.separator.comma.idris</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>block_comment</key>
		<dict>
			<key>begin</key>
			<string>\{-(?!#)</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.idris</string>
				</dict>
			</dict>
			<key>end</key>
			<string>-\}</string>
			<key>name</key>
			<string>comment.block.idris</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#block_comment</string>
				</dict>
			</array>
		</dict>
		<key>class_constraint</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#prelude_class</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.other.inherited-class.idris</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.other.attribute-name.idris</string>
						</dict>
					</dict>
					<key>match</key>
					<string>([a-zA-Z0-9_.']+)\s+([a-zA-Z0-9_']+)</string>
					<key>name</key>
					<string>meta.class-constraint.idris</string>
				</dict>
			</array>
		</dict>
		<key>comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.idris</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(--).*$\n?</string>
					<key>name</key>
					<string>comment.line.double-dash.idris</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.idris</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(\|\|\|).*$\n?</string>
					<key>name</key>
					<string>comment.line.triple-bar.idris</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#block_comment</string>
				</dict>
			</array>
		</dict>
		<key>context_signature</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\(</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.context.begin.idris</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\))\s*(=&gt;)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.context.end.idris</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.big-arrow.idris</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.context-signature.idris</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#class_constraint</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>directive</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.directive.idris</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.other.language-extension.idris</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^%(language)\s+(.*)$</string>
					<key>name</key>
					<string>meta.directive.language-extension.idris</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.directive.idris</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.other.totality.idris</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^%(default)\s+(total|partial)$</string>
					<key>name</key>
					<string>meta.directive.totality.idris</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.directive.idris</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.idris</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^%(provide)\s+.*\s+(with)\s+.*$</string>
					<key>name</key>
					<string>meta.directive.type-provider.idris</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.directive.idris</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^%(unqualified)$</string>
					<key>name</key>
					<string>meta.directive.idris</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.directive.idris</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.export.idris</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^%(access)\s+(public|abstract|private)$</string>
					<key>name</key>
					<string>meta.directive.export.idris</string>
				</dict>
			</array>
		</dict>
		<key>escape_characters</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\(NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\"'\&amp;])</string>
					<key>name</key>
					<string>constant.character.escape.ascii.idris</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\o[0-7]+|\\x[0-9A-Fa-f]+|\\[0-9]+</string>
					<key>name</key>
					<string>constant.character.escape.octal.idris</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\^[A-Z@\[\]\\\^_]</string>
					<key>name</key>
					<string>constant.character.escape.control.idris</string>
				</dict>
			</array>
		</dict>
		<key>infix_op</key>
		<dict>
			<key>match</key>
			<string>(\([|!%$+:\-.=&lt;/&gt;]+\)|\(,+\))</string>
			<key>name</key>
			<string>entity.name.function.infix.idris</string>
		</dict>
		<key>language_const</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\(\)</string>
					<key>name</key>
					<string>constant.language.unit.idris</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\[\]</string>
					<key>name</key>
					<string>constant.language.empty-list.idris</string>
				</dict>
				<dict>
					<key>match</key>
					<string>_\|_</string>
					<key>name</key>
					<string>constant.language.bottom.idris</string>
				</dict>
			</array>
		</dict>
		<key>parameter_type</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#prelude_type</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.name.idris</string>
						</dict>
					</dict>
					<key>match</key>
					<string>\(([a-zA-Z_'])\s*:(.+)\)</string>
					<key>name</key>
					<string>meta.parameter.named.idris</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.idris</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.name.idris</string>
						</dict>
					</dict>
					<key>match</key>
					<string>\{(auto|default)?([a-zA-Z_'])\s*:(.+)\}</string>
					<key>name</key>
					<string>variable.parameter.named.implicit.idris</string>
				</dict>
			</array>
		</dict>
		<key>prelude_class</key>
		<dict>
			<key>match</key>
			<string>\b(Eq|Ord|Num|MinBound|MaxBound|Integral|Applicative|Alternative|Cast|Foldable|Functor|Monad|Traversable|Uninhabited|Semigroup|VerifiedSemigroup|Monoid|VerifiedMonoid|Group|VerifiedGroup|AbelianGroup|VerifiedAbelianGroup|Ring|VerifiedRing|RingWithUnity|VerifiedRingWithUnity|JoinSemilattice|VerifiedJoinSemilattice|MeetSemilattice|VerifiedMeetSemilattice|BoundedJoinSemilattice|VerifiedBoundedJoinSemilattice|BoundedMeetSemilattice|VerifiedBoundedMeetSemilattice|Lattice|VerifiedLattice|BoundedLattice|VerifiedBoundedLattice)\b</string>
			<key>name</key>
			<string>support.class.prelude.idris</string>
		</dict>
		<key>prelude_function</key>
		<dict>
			<key>comment</key>
			<string>TODO review it; these are Haskell prelude functions</string>
			<key>match</key>
			<string>\b(abs|acos|acosh|all|and|any|appendFile|applyM|asTypeOf|asin|asinh|atan|atan2|atanh|break|catch|ceiling|compare|concat|concatMap|const|cos|cosh|curry|cycle|decodeFloat|div|divMod|drop|dropWhile|elem|encodeFloat|enumFrom|enumFromThen|enumFromThenTo|enumFromTo|error|even|exp|exponent|fail|filter|flip|floatDigits|floatRadix|floatRange|floor|fmap|foldl|foldl1|foldr|foldr1|fromEnum|fromInteger|fromIntegral|fromRational|fst|gcd|getChar|getContents|getLine|head|id|init|interact|ioError|isDenormalized|isIEEE|isInfinite|isNaN|isNegativeZero|iterate|last|lcm|length|lex|lines|log|logBase|lookup|map|mapM|mapM_|max|maxBound|maximum|maybe|min|minBound|minimum|mod|negate|not|notElem|null|odd|or|otherwise|pi|pred|print|product|properFraction|putChar|putStr|putStrLn|quot|quotRem|read|readFile|readIO|readList|readLn|readParen|reads|readsPrec|realToFrac|recip|rem|repeat|replicate|return|reverse|round|scaleFloat|scanl|scanl1|scanr|scanr1|seq|sequence|sequence_|show|showChar|showList|showParen|showString|shows|showsPrec|significand|signum|sin|sinh|snd|span|splitAt|sqrt|subtract|succ|sum|tail|take|takeWhile|tan|tanh|toEnum|toInteger|toRational|truncate|uncurry|undefined|unlines|until|unwords|unzip|unzip3|userError|words|writeFile|zip|zip3|zipWith|zipWith3)\b</string>
			<key>name</key>
			<string>support.function.prelude.idris</string>
		</dict>
		<key>prelude_type</key>
		<dict>
			<key>match</key>
			<string>\b(Int(eger)?|Maybe|Either|Bool|Float|Double|Char|String|Ordering|ShowS|ReadS|FilePath|IO(Error)?)\b</string>
			<key>name</key>
			<string>support.type.prelude.idris</string>
		</dict>
		<key>type_signature</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#parameter_type</string>
				</dict>
				<dict>
					<key>match</key>
					<string>-&gt;</string>
					<key>name</key>
					<string>keyword.operator.arrow.idris</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.idris</string>
	<key>uuid</key>
	<string>8957eeb1-b492-4497-85b8-b86e511e87eb</string>
</dict>
</plist>
